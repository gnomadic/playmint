/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type AddressKeyStruct = { name: string; value: AddressLike };

export type AddressKeyStructOutput = [name: string, value: string] & {
  name: string;
  value: string;
};

export type UintKeyStruct = { name: string; value: BigNumberish };

export type UintKeyStructOutput = [name: string, value: bigint] & {
  name: string;
  value: bigint;
};

export type StringKeyStruct = { name: string; value: string };

export type StringKeyStructOutput = [name: string, value: string] & {
  name: string;
  value: string;
};

export type FlowParamsStruct = {
  addresses: AddressKeyStruct[];
  uints: UintKeyStruct[];
  strings: StringKeyStruct[];
};

export type FlowParamsStructOutput = [
  addresses: AddressKeyStructOutput[],
  uints: UintKeyStructOutput[],
  strings: StringKeyStructOutput[]
] & {
  addresses: AddressKeyStructOutput[];
  uints: UintKeyStructOutput[];
  strings: StringKeyStructOutput[];
};

export type GameSummaryStruct = {
  game: AddressLike;
  gm: AddressLike;
  displayName: string;
  description: string;
  gameUrl: string;
  availableFunctions: AddressKeyStruct[];
  availableData: AddressKeyStruct[];
  flows: string[];
};

export type GameSummaryStructOutput = [
  game: string,
  gm: string,
  displayName: string,
  description: string,
  gameUrl: string,
  availableFunctions: AddressKeyStructOutput[],
  availableData: AddressKeyStructOutput[],
  flows: string[]
] & {
  game: string;
  gm: string;
  displayName: string;
  description: string;
  gameUrl: string;
  availableFunctions: AddressKeyStructOutput[];
  availableData: AddressKeyStructOutput[];
  flows: string[];
};

export interface GameInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addComponent"
      | "availableEntityData"
      | "components"
      | "createEntity"
      | "createFlow"
      | "debugFlow"
      | "description"
      | "displayName"
      | "entities"
      | "entityFactory"
      | "executeFlow"
      | "flowNames"
      | "flows"
      | "functionLookup"
      | "gameUrl"
      | "getEntity"
      | "getFlows"
      | "getSummary"
      | "getSupportedFunctions"
      | "gm"
      | "initialize"
      | "supportedFunctions"
      | "updateDescription"
      | "updateGameUrl"
      | "validateIsModule"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;

  encodeFunctionData(
    functionFragment: "addComponent",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "availableEntityData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "components",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createEntity",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createFlow",
    values: [string, AddressKeyStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "debugFlow",
    values: [string, FlowParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "description",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "displayName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "entities",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "entityFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeFlow",
    values: [string, FlowParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "flowNames",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "flows",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "functionLookup",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "gameUrl", values?: undefined): string;
  encodeFunctionData(functionFragment: "getEntity", values: [string]): string;
  encodeFunctionData(functionFragment: "getFlows", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getSummary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedFunctions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "gm", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedFunctions",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDescription",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateGameUrl",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "validateIsModule",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addComponent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "availableEntityData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "components", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createEntity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createFlow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "debugFlow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "description",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "displayName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "entities", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "entityFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeFlow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "flowNames", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flows", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "functionLookup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gameUrl", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getEntity", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getFlows", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getSummary", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedFunctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportedFunctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateGameUrl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateIsModule",
    data: BytesLike
  ): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Game extends BaseContract {
  connect(runner?: ContractRunner | null): Game;
  waitForDeployment(): Promise<this>;

  interface: GameInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addComponent: TypedContractMethod<
    [component: AddressLike],
    [void],
    "nonpayable"
  >;

  availableEntityData: TypedContractMethod<[arg0: string], [string], "view">;

  components: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  createEntity: TypedContractMethod<
    [entityName: string],
    [string],
    "nonpayable"
  >;

  createFlow: TypedContractMethod<
    [name: string, funcs: AddressKeyStruct[]],
    [void],
    "nonpayable"
  >;

  debugFlow: TypedContractMethod<
    [name: string, params: FlowParamsStruct],
    [void],
    "nonpayable"
  >;

  description: TypedContractMethod<[], [string], "view">;

  displayName: TypedContractMethod<[], [string], "view">;

  entities: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  entityFactory: TypedContractMethod<[], [string], "view">;

  executeFlow: TypedContractMethod<
    [name: string, params: FlowParamsStruct],
    [void],
    "nonpayable"
  >;

  flowNames: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  flows: TypedContractMethod<
    [arg0: string, arg1: BigNumberish],
    [[string, string] & { name: string; value: string }],
    "view"
  >;

  functionLookup: TypedContractMethod<[arg0: string], [string], "view">;

  gameUrl: TypedContractMethod<[], [string], "view">;

  getEntity: TypedContractMethod<[key: string], [string], "view">;

  getFlows: TypedContractMethod<[], [string[]], "view">;

  getSummary: TypedContractMethod<[], [GameSummaryStructOutput], "view">;

  getSupportedFunctions: TypedContractMethod<
    [module: AddressLike],
    [string[]],
    "view"
  >;

  gm: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<
    [_gm: AddressLike, _displayName: string, _entityFactory: AddressLike],
    [void],
    "nonpayable"
  >;

  supportedFunctions: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  updateDescription: TypedContractMethod<
    [_description: string],
    [void],
    "nonpayable"
  >;

  updateGameUrl: TypedContractMethod<[_gameUrl: string], [void], "nonpayable">;

  validateIsModule: TypedContractMethod<
    [module: AddressLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addComponent"
  ): TypedContractMethod<[component: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "availableEntityData"
  ): TypedContractMethod<[arg0: string], [string], "view">;
  getFunction(
    nameOrSignature: "components"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "createEntity"
  ): TypedContractMethod<[entityName: string], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "createFlow"
  ): TypedContractMethod<
    [name: string, funcs: AddressKeyStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "debugFlow"
  ): TypedContractMethod<
    [name: string, params: FlowParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "description"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "displayName"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "entities"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "entityFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "executeFlow"
  ): TypedContractMethod<
    [name: string, params: FlowParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "flowNames"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "flows"
  ): TypedContractMethod<
    [arg0: string, arg1: BigNumberish],
    [[string, string] & { name: string; value: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "functionLookup"
  ): TypedContractMethod<[arg0: string], [string], "view">;
  getFunction(
    nameOrSignature: "gameUrl"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getEntity"
  ): TypedContractMethod<[key: string], [string], "view">;
  getFunction(
    nameOrSignature: "getFlows"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getSummary"
  ): TypedContractMethod<[], [GameSummaryStructOutput], "view">;
  getFunction(
    nameOrSignature: "getSupportedFunctions"
  ): TypedContractMethod<[module: AddressLike], [string[]], "view">;
  getFunction(nameOrSignature: "gm"): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_gm: AddressLike, _displayName: string, _entityFactory: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportedFunctions"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "updateDescription"
  ): TypedContractMethod<[_description: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateGameUrl"
  ): TypedContractMethod<[_gameUrl: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "validateIsModule"
  ): TypedContractMethod<[module: AddressLike], [boolean], "view">;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;

  filters: {
    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
  };
}
