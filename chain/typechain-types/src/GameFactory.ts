/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type AddressKeyStruct = { name: string; value: AddressLike };

export type AddressKeyStructOutput = [name: string, value: string] & {
  name: string;
  value: string;
};

export type GameSummaryStruct = {
  game: AddressLike;
  gm: AddressLike;
  displayName: string;
  description: string;
  gameUrl: string;
  availableFunctions: AddressKeyStruct[];
  availableData: AddressKeyStruct[];
  flows: string[];
};

export type GameSummaryStructOutput = [
  game: string,
  gm: string,
  displayName: string,
  description: string,
  gameUrl: string,
  availableFunctions: AddressKeyStructOutput[],
  availableData: AddressKeyStructOutput[],
  flows: string[]
] & {
  game: string;
  gm: string;
  displayName: string;
  description: string;
  gameUrl: string;
  availableFunctions: AddressKeyStructOutput[];
  availableData: AddressKeyStructOutput[];
  flows: string[];
};

export interface GameFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "admin"
      | "createGame"
      | "entityFactory"
      | "gameContract"
      | "games"
      | "getGameCount"
      | "getGames"
      | "initialize"
      | "setEntityFactory"
      | "setGameContract"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "GameCreated"): EventFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createGame",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "entityFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gameContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "games", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "getGameCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGames",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setEntityFactory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setGameContract",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "entityFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gameContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "games", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGameCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getGames", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setEntityFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGameContract",
    data: BytesLike
  ): Result;
}

export namespace GameCreatedEvent {
  export type InputTuple = [gm: AddressLike, game: AddressLike];
  export type OutputTuple = [gm: string, game: string];
  export interface OutputObject {
    gm: string;
    game: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GameFactory extends BaseContract {
  connect(runner?: ContractRunner | null): GameFactory;
  waitForDeployment(): Promise<this>;

  interface: GameFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "view">;

  createGame: TypedContractMethod<
    [_gm: AddressLike, displayName: string],
    [string],
    "nonpayable"
  >;

  entityFactory: TypedContractMethod<[], [string], "view">;

  gameContract: TypedContractMethod<[], [string], "view">;

  games: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getGameCount: TypedContractMethod<[], [bigint], "view">;

  getGames: TypedContractMethod<
    [startAt: BigNumberish],
    [GameSummaryStructOutput[]],
    "view"
  >;

  initialize: TypedContractMethod<
    [_gameContract: AddressLike, _entityFactory: AddressLike],
    [void],
    "nonpayable"
  >;

  setEntityFactory: TypedContractMethod<
    [_entityFactory: AddressLike],
    [void],
    "nonpayable"
  >;

  setGameContract: TypedContractMethod<
    [_gameContract: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createGame"
  ): TypedContractMethod<
    [_gm: AddressLike, displayName: string],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "entityFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "gameContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "games"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getGameCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getGames"
  ): TypedContractMethod<
    [startAt: BigNumberish],
    [GameSummaryStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_gameContract: AddressLike, _entityFactory: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setEntityFactory"
  ): TypedContractMethod<[_entityFactory: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setGameContract"
  ): TypedContractMethod<[_gameContract: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "GameCreated"
  ): TypedContractEvent<
    GameCreatedEvent.InputTuple,
    GameCreatedEvent.OutputTuple,
    GameCreatedEvent.OutputObject
  >;

  filters: {
    "GameCreated(address,address)": TypedContractEvent<
      GameCreatedEvent.InputTuple,
      GameCreatedEvent.OutputTuple,
      GameCreatedEvent.OutputObject
    >;
    GameCreated: TypedContractEvent<
      GameCreatedEvent.InputTuple,
      GameCreatedEvent.OutputTuple,
      GameCreatedEvent.OutputObject
    >;
  };
}
