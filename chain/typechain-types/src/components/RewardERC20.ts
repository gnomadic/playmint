/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type ComponentSummaryStruct = {
  component: AddressLike;
  functions: string[];
  abis: string[];
  required: string[];
  displayName: string;
  description: string;
};

export type ComponentSummaryStructOutput = [
  component: string,
  functions: string[],
  abis: string[],
  required: string[],
  displayName: string,
  description: string
] & {
  component: string;
  functions: string[];
  abis: string[];
  required: string[];
  displayName: string;
  description: string;
};

export interface RewardERC20Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "abis"
      | "functions"
      | "getSummary"
      | "initialize"
      | "required"
      | "rewardTie"
      | "rewardWinner"
      | "setReward"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "abis", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "functions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSummary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "required",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTie",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardWinner",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setReward",
    values: [AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "abis", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "functions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getSummary", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "required", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rewardTie", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardWinner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setReward", data: BytesLike): Result;
}

export interface RewardERC20 extends BaseContract {
  connect(runner?: ContractRunner | null): RewardERC20;
  waitForDeployment(): Promise<this>;

  interface: RewardERC20Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  abis: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  functions: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getSummary: TypedContractMethod<[], [ComponentSummaryStructOutput], "view">;

  initialize: TypedContractMethod<[game: AddressLike], [void], "nonpayable">;

  required: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  rewardTie: TypedContractMethod<
    [executor: AddressLike, gameAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  rewardWinner: TypedContractMethod<
    [executor: AddressLike, gameAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setReward: TypedContractMethod<
    [game: AddressLike, _reward: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "abis"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "functions"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getSummary"
  ): TypedContractMethod<[], [ComponentSummaryStructOutput], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[game: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "required"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "rewardTie"
  ): TypedContractMethod<
    [executor: AddressLike, gameAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rewardWinner"
  ): TypedContractMethod<
    [executor: AddressLike, gameAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setReward"
  ): TypedContractMethod<
    [game: AddressLike, _reward: AddressLike],
    [void],
    "nonpayable"
  >;

  filters: {};
}
